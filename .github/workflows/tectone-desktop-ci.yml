name: Tectone Desktop CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push of a new tag
  push:
    tags:
      - "v*.*.*"

  # Allows you to run this workflow manually from the Actions tab
  # workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  linux:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    outputs:
      release-version: ${{ steps.release-version.outputs.RELEASE_VERSION }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set RELEASE_VERSION ENV variable
        id: release-version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - uses: dAppServer/wails-build-action@main
        with:
          build-name: "tectone-desktop.${{ steps.release-version.outcome.RELEASE_VERSION }}.linux-amd64"
          build-platform: linux/amd64
          wails-build-webview2: "embed"
          wails-version: v2.8.0
  macos:
    runs-on: macos-latest
    needs: linux

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v2

      # - name: Import Code Signing Certificates for MacOs
      #   uses: Apple-Actions/import-codesign-certs@v1
      #   with:
      #     keychain-password: ${{ secrets.sign-macos-apple-password }}
      #     p12-file-base64: ${{ secrets.sign-macos-app-cert }}
      #     p12-password: ${{ secrets.sign-macos-app-cert-password }}
      # - name: Import Code-Signing Certificates for macOS Installer
      #   uses: Apple-Actions/import-codesign-certs@v1
      #   with:
      #     keychain-password: ${{ secrets.sign-macos-apple-password }}
      #     p12-file-base64: ${{ secrets.sign-macos-installer-cert }}
      #     p12-password: ${{ secrets.sign-macos-installer-cert-password }}
      #     create-keychain: false
      # - name: Sign macOS binary
      #   shell: bash
      #   env:
      #     APPLE_PASSWORD: ${{ secrets.sign-macos-apple-password }}
      #   run: |
      #     echo "Signing Package"
      #     gon -log-level=info ./build/darwin/gon-sign.json

      - uses: dAppServer/wails-build-action@main
        with:
          build-name: "tectone-desktop.${{ needs.linux.outputs.release-version.RELEASE_VERSION }}.darwin-universal"
          build-platform: darwin/universal
          wails-version: "v2.8.0"
          go-version: ^1.18
          # sign: "false"
          # sign-macos-apple-password: ${{ secrets.APPLE_PASSWORD }}
          # sign-macos-app-id: "Developer ID Application: Lethean LTD (W2DNA5L5DY)"
          # sign-macos-app-cert: ${{ secrets.MAC_DEVELOPER_CERT }}
          # sign-macos-app-cert-password: ${{ secrets.MAC_DEVELOPER_PASS }}
          # sign-macos-installer-id: "Developer ID Installer: Lethean LTD (W2DNA5L5DY)"
          # sign-macos-installer-cert: ${{ secrets.MAC_DEVELOPER_INSTALL_CERT }}
          # sign-macos-installer-cert-password: ${{ secrets.MAC_DEVELOPER_INSTALL_PASS }}

  # windows:
  #   runs-on: windows-2022
  #   steps:
  #     # Checkout code
  #     - uses: actions/checkout@v2
  #       with:
  #         repository: "letheanVPN/desktop"
  #         submodules: recursive
  #     - uses: dAppServer/wails-build-action@main
  #       with:
  #         build-name: lethean.exe
  #         build-platform: windows/amd64
  #         wails-build-webview2: "embed"
  #         wails-version: v2.3.1
  #         go-version: ^1.18
  #         nsis: "false"
  windows-nsis:
    runs-on: windows-2022
    needs: linux
    steps:
      # Checkout code
      - uses: actions/checkout@v2
        with:
          repository:
          submodules: recursive

      # Build Windows Binary
      - name: Build windows Binary
        uses: dAppServer/wails-build-action@main
        with:
          build-name: "tectone-desktop.${{ needs.linux.outputs.release-version.RELEASE_VERSION }}.windows-amd64"
          build-platform: windows/amd64
          wails-build-webview2: "embed"
          wails-version: v2.3.1
          go-version: ^1.18
          nsis: "true"

  webhook:
    runs-on: ubuntu-latest
    needs: [linux, macos, windows-nsis]
    steps:
      - name: Send Webhook To
        shell: bash
        run: |
          curl -H 'Content-Type: application/json' \
           -H 'Authorization: Bearer ${{secrets.WEBHOOK_TOKEN}}'
           -d '{ "macos":"https://github.com/Tectone23/tectone-desktop/releases/download/${{ needs.linux.outputs.release-version.RELEASE_VERSION }}/tectone-desktop.${{ needs.linux.outputs.release-version.RELEASE_VERSION }}.darwin-amd64","linux":"https://github.com/Tectone23/tectone-desktop/releases/download/${{ needs.linux.outputs.release-version.RELEASE_VERSION }}/tectone-desktop.${{ needs.linux.outputs.release-version.RELEASE_VERSION }}.linux-amd64", "windows": "https://github.com/Tectone23/tectone-desktop/releases/download/${{ needs.linux.outputs.release-version.RELEASE_VERSION }}/tectone-desktop.${{ needs.linux.outputs.release-version.RELEASE_VERSION }}.windows-amd64"}' \
           -X POST \
           ${{ secrets.TECTONE23_WEBHOOK_ENDPOINT}}

# name: Tectone Desktop CI

# on:
#   push:
#     tags:
#       - "*"
# env:
#   # Necessary for most environments as build failure can occur due to OOM issues
#   NODE_OPTIONS: "--max-old-space-size=4096"

# jobs:

#   build:
#     strategy:
#       # Failure in one platform build won't impact the others
#       fail-fast: false
#       matrix:
#         build:
#           - name: "tectone-desktop.${{ env.RELEASE_VERSION }}.linux-amd64.pkg"
#             platform: "linux/amd64"
#             os: "ubuntu-latest"
#           - name: "tectone-desktop.${{ env.RELEASE_VERSION }}.windows-amd64.pkg"
#             platform: "windows/amd64"
#             os: "windows-latest"
#           - name: "tectone-desktop.${{ env.RELEASE_VERSION }}.darwin-amd64.pkgp"
#             platform: "darwin/universal"
#             os: "macos-latest"

#     runs-on: ${{ matrix.build.os }}
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v4

#       - name: Set RELEASE_VERSION ENV variable
#         run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

#       - name: Test
#         run: |
#           echo $RELEASE_VERSION
#           echo ${{ env.RELEASE_VERSION }}
#       - name: Build wails
#         uses: dAppServer/wails-build-action@v2.2
#         id: build
#         with:
#           build-name: ${{ matrix.build.name }}
#           build-platform: ${{ matrix.build.platform }}
#           package: true
#           go-version: "1.21"
#   build-and-release-windows:
#     runs-on: windows-latest
#   build-and-release-macos:
#     runs-on: macos-latest
